/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package waambokt

import dev.kord.core.Kord
import dev.kord.core.event.interaction.GuildChatInputCommandInteractionCreateEvent
import dev.kord.core.on
import dev.kord.gateway.Intent
import dev.kord.gateway.PrivilegedIntent
import dev.kord.rest.json.request.ApplicationCommandCreateRequest
import kotlinx.coroutines.runBlocking
import kotlinx.serialization.decodeFromString
import kotlinx.serialization.json.Json
import mu.KotlinLogging
import waambokt.commands.ping.Ping
import waambokt.commands.sum.Sum
import waambokt.config.Env
import waambokt.config.Registry
import waambokt.extensions.KordExtension.deleteAllApplicationCommands

fun main(): Unit = runBlocking {
    val logger = KotlinLogging.logger {}

    logger.info("discord client login...")
    val kord = Kord(Env.token)

    // remove chat input commands if ENV bool is set
    if (Env.clearCommands) {
        kord.deleteAllApplicationCommands()
    }

    logger.info("init commands...")
    val commands: List<ApplicationCommandCreateRequest> = Registry.filenames.map {
        val json = javaClass.classLoader.getResource("commands/$it")?.readText() ?: ""
        return@map Json.decodeFromString<ApplicationCommandCreateRequest>(json)
    }

    // There are no global commands, because discord takes a while to register them
    // and being able to DM the bot is not worth the hassle during development
    kord.rest.interaction.createGuildApplicationCommands(
        kord.selfId,
        Env.testGuild,
        commands
    )

    if (Env.isProd) {
        kord.rest.interaction.createGuildApplicationCommands(
            kord.selfId,
            Env.prodGuild,
            commands
        )
    }

    kord.on<GuildChatInputCommandInteractionCreateEvent> {
        logger.info {
            "GuildChatInputCommandInteractionCreateEvent ${this.interaction.invokedCommandName}"
        }
        when (this.interaction.invokedCommandName) {
            "ping" -> Ping.invoke(this)
            "sum" -> Sum.invoke(this)
        }
    }

    kord.login {
        @OptIn(PrivilegedIntent::class)
        intents += Intent.MessageContent
        intents += Intent.GuildIntegrations
    }
}
